<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="QINDW273" ignored="0" name="Default test" tests="8" failures="0" timestamp="20 Aug 2019 05:16:04 GMT" time="4.081" errors="0">
  <testcase name="@BeforeMethod initialise_Driver" time="3.991" classname="TestPackage.HandlingDynamicElements">
    <failure type="org.openqa.selenium.NoSuchWindowException" message="no such window: target window already closed
from unknown error: web view not found
  (Session info: chrome=76.0.3809.100)
Build info: version: &amp;apos;3.14.0&amp;apos;, revision: &amp;apos;aacccce0&amp;apos;, time: &amp;apos;2018-08-02T20:19:58.91Z&amp;apos;
System info: host: &amp;apos;QINDW273&amp;apos;, ip: &amp;apos;10.11.114.135&amp;apos;, os.name: &amp;apos;Windows 10&amp;apos;, os.arch: &amp;apos;amd64&amp;apos;, os.version: &amp;apos;10.0&amp;apos;, java.version: &amp;apos;1.8.0_221&amp;apos;
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: true, browserName: chrome, browserVersion: 76.0.3809.100, chrome: {chromedriverVersion: 75.0.3770.140 (2d9f97485c7b..., userDataDir: C:\Users\PRAVIN~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:57813}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: XP, platformName: XP, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify}
Session ID: 60e48d7dbec3783274249a69eabb86a7">
      <![CDATA[org.openqa.selenium.NoSuchWindowException: no such window: target window already closed
from unknown error: web view not found
  (Session info: chrome=76.0.3809.100)
Build info: version: '3.14.0', revision: 'aacccce0', time: '2018-08-02T20:19:58.91Z'
System info: host: 'QINDW273', ip: '10.11.114.135', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_221'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: true, browserName: chrome, browserVersion: 76.0.3809.100, chrome: {chromedriverVersion: 75.0.3770.140 (2d9f97485c7b..., userDataDir: C:\Users\PRAVIN~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:57813}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: XP, platformName: XP, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify}
Session ID: 60e48d7dbec3783274249a69eabb86a7
at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
at java.lang.reflect.Constructor.newInstance(Unknown Source)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:548)
at org.openqa.selenium.remote.RemoteWebDriver.get(RemoteWebDriver.java:276)
at TestPackage.HandlingDynamicElements.initialise_Driver(HandlingDynamicElements.java:33)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:59)
at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:458)
at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:222)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:523)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
    </failure>
  </testcase> <!-- @BeforeMethod initialise_Driver -->
  <testcase name="@AfterMethod getScreenshot" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- @AfterMethod getScreenshot -->
  <testcase name="@AfterMethod tearDown" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase name="@BeforeMethod initialise_Driver" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- @BeforeMethod initialise_Driver -->
  <testcase name="@AfterMethod getScreenshot" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- @AfterMethod getScreenshot -->
  <testcase name="@AfterMethod tearDown" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase name="@BeforeMethod initialise_Driver" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- @BeforeMethod initialise_Driver -->
  <testcase name="@AfterMethod getScreenshot" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- @AfterMethod getScreenshot -->
  <testcase name="@AfterMethod tearDown" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase name="@BeforeMethod initialise_Driver" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- @BeforeMethod initialise_Driver -->
  <testcase name="@AfterMethod getScreenshot" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- @AfterMethod getScreenshot -->
  <testcase name="@AfterMethod tearDown" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase name="@BeforeMethod initialise_Driver" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- @BeforeMethod initialise_Driver -->
  <testcase name="@AfterMethod getScreenshot" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- @AfterMethod getScreenshot -->
  <testcase name="@AfterMethod tearDown" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase name="@BeforeMethod initialise_Driver" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- @BeforeMethod initialise_Driver -->
  <testcase name="@AfterMethod getScreenshot" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- @AfterMethod getScreenshot -->
  <testcase name="@AfterMethod tearDown" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase name="@BeforeMethod initialise_Driver" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- @BeforeMethod initialise_Driver -->
  <testcase name="@AfterMethod getScreenshot" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- @AfterMethod getScreenshot -->
  <testcase name="@AfterMethod tearDown" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase name="@BeforeMethod initialise_Driver" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- @BeforeMethod initialise_Driver -->
  <testcase name="@AfterMethod getScreenshot" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- @AfterMethod getScreenshot -->
  <testcase name="@AfterMethod tearDown" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase name="autoSuggestion" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- autoSuggestion -->
  <testcase name="getPageDetails" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- getPageDetails -->
  <testcase name="handling_WebTable" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- handling_WebTable -->
  <testcase name="selectClassExample" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- selectClassExample -->
  <testcase name="switchToAlert" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- switchToAlert -->
  <testcase name="switchToFrame" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- switchToFrame -->
  <testcase name="switchToTab" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- switchToTab -->
  <testcase name="verify_elementDisplayed" time="0.0" classname="TestPackage.HandlingDynamicElements">
    <skipped/>
  </testcase> <!-- verify_elementDisplayed -->
</testsuite> <!-- Default test -->
